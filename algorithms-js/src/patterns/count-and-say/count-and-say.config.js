/**
 * Configuration for Count and Say Algorithm Demo
 */

const config = {
    name: "Count and Say",
    title: "Count and Say Algorithm Demo",
    category: "patterns",
    problem: "Generate the nth term of the Count and Say sequence by reading and describing the digits of the previous term.",
    cssPath: "../../../assets/css/styles.css",
    jsPath: "count-and-say-core.js",
    githubPath: "https://github.com/sachinlala/SimplifyLearning/blob/master/algorithms-js/src/patterns/count-and-say/count-and-say-core.js",
    
    // Multi-language source code paths
    sourceCode: {
        javascript: "https://github.com/sachinlala/SimplifyLearning/blob/master/algorithms-js/src/patterns/count-and-say/count-and-say-core.js",
        java: "https://github.com/sachinlala/SimplifyLearning/blob/master/algorithms-java/src/main/java/com/sl/algorithms/patterns/CountAndSay.java",
        python: "", // Coming soon
        go: "" // Coming soon
    },
    algorithmFunction: "generateCountAndSay",
    hasVisualization: true,
    hasStepsFile: true,
    
    inputs: [
        {
            id: "starting-number",
            type: "number",
            label: "Starting Number",
            min: 1,
            max: 9,
            defaultValue: 1,
            width: "80px"
        },
        {
            id: "row-number",
            type: "number",
            label: "Row Number (max 12)",
            min: 0,
            max: 12,
            defaultValue: 5,
            width: "80px"
        }
    ],
    
    example: "Starting with 1, row 1 = \"11\", row 2 = \"21\", row 3 = \"1211\"...",
    
    explanation: {
        description: "The Count and Say sequence is generated by reading the previous number and describing what you see:",
        steps: [
            "1 → \"one 1\" → 11",
            "11 → \"two 1s\" → 21", 
            "21 → \"one 2, one 1\" → 1211",
            "1211 → \"one 1, one 2, two 1s\" → 111221"
        ]
    },
    
    customDemoFunction: `
        function runDemo() {
            const startingNumber = parseInt(document.getElementById('starting-number').value);
            const rowNumber = parseInt(document.getElementById('row-number').value);
            const resultContainer = document.getElementById('result');
            const errorContainer = document.getElementById('error-message');
            const visualizationSection = document.getElementById('visualization-section');
            
            // Clear previous error and result
            errorContainer.innerHTML = '';
            errorContainer.style.display = 'none';
            resultContainer.innerHTML = '';
            visualizationSection.style.display = 'none';
            
            // Validate inputs
            if (startingNumber <= 0 || startingNumber > 9) {
                showError('Starting number must be between 1 and 9');
                return;
            }
            
            if (rowNumber < 0) {
                showError('Row number must be non-negative');
                return;
            }
            
            if (rowNumber > 12) {
                showError('Row number limited to 12 for demo purposes');
                return;
            }
            
            try {
                // Generate sequence with steps
                const sequenceSteps = generateCountAndSayWithSteps(startingNumber, rowNumber);
                
                // Show final result
                const finalResult = sequenceSteps[sequenceSteps.length - 1];
                resultContainer.innerHTML = \`
                    <strong>Row \${rowNumber} starting with \${startingNumber}:</strong><br>
                    \${wrapLongText(finalResult.sequence)}<br><br>
                    <strong>Sequence Length:</strong> \${finalResult.sequence.length} characters
                \`;
                
                // Show animated visualization
                showCountAndSayAnimation(sequenceSteps);
                visualizationSection.style.display = 'block';
                
            } catch (error) {
                showError(error.message);
            }
        }
        
        function generateCountAndSayWithSteps(startNum, targetRow) {
            const steps = [];
            let current = startNum.toString();
            
            steps.push({
                row: 0,
                sequence: current,
                description: \`Starting with: \${current}\`,
                process: []
            });
            
            for (let row = 1; row <= targetRow; row++) {
                const processSteps = [];
                let result = '';
                let i = 0;
                
                while (i < current.length) {
                    let count = 1;
                    const digit = current[i];
                    
                    // Count consecutive identical digits
                    while (i + count < current.length && current[i + count] === digit) {
                        count++;
                    }
                    
                    processSteps.push({
                        startIndex: i,
                        endIndex: i + count - 1,
                        digit: digit,
                        count: count,
                        saying: \`\${count} \${digit}\${count > 1 ? 's' : ''}\`
                    });
                    
                    result += count.toString() + digit;
                    i += count;
                }
                
                steps.push({
                    row: row,
                    sequence: result,
                    previous: current,
                    description: \`Row \${row}: Reading \"\${current}\" → \"\${result}\"\`,
                    process: processSteps
                });
                
                current = result;
            }
            
            return steps;
        }
        
        function showCountAndSayAnimation(steps) {
            const arrayViz = document.getElementById('array-visualization');
            const stepsContainer = document.getElementById('steps-container');
            
            // Clear previous visualization
            arrayViz.innerHTML = '';
            stepsContainer.innerHTML = '';
            
            // Create controls
            const controlsDiv = document.createElement('div');
            controlsDiv.style.cssText = 'text-align: center; margin-bottom: 20px;';
            controlsDiv.innerHTML = \`
                <button id="start-count-animation" style="padding: 8px 16px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; margin: 0 5px;">Start Animation</button>
                <button id="pause-count-animation" style="padding: 8px 16px; background: #ffc107; color: black; border: none; border-radius: 4px; cursor: pointer; margin: 0 5px;" disabled>Pause</button>
                <button id="reset-count-animation" style="padding: 8px 16px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; margin: 0 5px;">Reset</button>
            \`;
            arrayViz.appendChild(controlsDiv);
            
            // Current sequence display
            const sequenceDiv = document.createElement('div');
            sequenceDiv.id = 'current-sequence';
            sequenceDiv.style.cssText = 'text-align: center; margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; font-size: 1.2em; font-weight: bold; min-height: 60px; display: flex; align-items: center; justify-content: center;';
            sequenceDiv.textContent = steps[0].sequence;
            arrayViz.appendChild(sequenceDiv);
            
            // Status display
            const statusDiv = document.createElement('div');
            statusDiv.id = 'count-status';
            statusDiv.style.cssText = 'text-align: center; margin-bottom: 20px; font-size: 1.1em; font-weight: bold; min-height: 25px;';
            statusDiv.textContent = 'Ready to start Count and Say animation...';
            arrayViz.appendChild(statusDiv);
            
            // Animation variables
            let currentStepIndex = 0;
            let animationRunning = false;
            let animationInterval;
            
            function updateCountVisualization(step) {
                const sequenceDiv = document.getElementById('current-sequence');
                const statusDiv = document.getElementById('count-status');
                
                if (step.row === 0) {
                    sequenceDiv.textContent = step.sequence;
                    statusDiv.textContent = step.description;
                    return;
                }
                
                // Show the previous sequence with highlighting
                sequenceDiv.innerHTML = '';
                const chars = step.previous.split('');
                
                chars.forEach((char, index) => {
                    const span = document.createElement('span');
                    span.textContent = char;
                    span.style.cssText = 'display: inline-block; padding: 5px 8px; margin: 2px; background: #e3f2fd; border: 2px solid #2196f3; border-radius: 4px; font-family: monospace;';
                    sequenceDiv.appendChild(span);
                });
                
                statusDiv.textContent = \`Row \${step.row}: Reading \"\${step.previous}\"...\`;
                
                // Show process steps
                const processInfo = document.createElement('div');
                processInfo.style.cssText = 'background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 4px; border-left: 4px solid #007acc;';
                
                const processHTML = step.process.map(p => 
                    \`<span style="display: inline-block; margin: 5px; padding: 5px 10px; background: #fff3cd; border-radius: 4px; border: 1px solid #ffeaa7;">
                        \"\${step.previous.substring(p.startIndex, p.endIndex + 1)}\" → \${p.saying} → \${p.count}\${p.digit}
                    </span>
                \`).join('');
                
                processInfo.innerHTML = \`
                    <strong>Reading Process:</strong><br>
                    \${processHTML}<br><br>
                    <strong>Result:</strong> \"\${step.sequence}\"
                \`;
                
                // Add to steps container
                if (stepsContainer.children.length > 5) {
                    stepsContainer.removeChild(stepsContainer.firstChild);
                }
                stepsContainer.appendChild(processInfo);
                
                // Update the sequence display after a delay
                setTimeout(() => {
                    sequenceDiv.textContent = step.sequence;
                    statusDiv.textContent = \`Row \${step.row} Complete: \"\${step.sequence}\"\`;
                }, 1000);
            }
            
            function startCountAnimation() {
                if (animationRunning || currentStepIndex >= steps.length) return;
                
                animationRunning = true;
                document.getElementById('start-count-animation').disabled = true;
                document.getElementById('pause-count-animation').disabled = false;
                
                animationInterval = setInterval(() => {
                    if (currentStepIndex >= steps.length) {
                        clearInterval(animationInterval);
                        animationRunning = false;
                        document.getElementById('start-count-animation').disabled = false;
                        document.getElementById('pause-count-animation').disabled = true;
                        document.getElementById('count-status').textContent = 'Count and Say sequence complete! 🎉';
                        return;
                    }
                    
                    updateCountVisualization(steps[currentStepIndex]);
                    currentStepIndex++;
                }, 2000); // 2 second delay between steps
            }
            
            function pauseCountAnimation() {
                clearInterval(animationInterval);
                animationRunning = false;
                document.getElementById('start-count-animation').disabled = false;
                document.getElementById('pause-count-animation').disabled = true;
            }
            
            function resetCountAnimation() {
                clearInterval(animationInterval);
                animationRunning = false;
                currentStepIndex = 0;
                document.getElementById('start-count-animation').disabled = false;
                document.getElementById('pause-count-animation').disabled = true;
                stepsContainer.innerHTML = '';
                
                // Reset to initial state
                document.getElementById('current-sequence').textContent = steps[0].sequence;
                document.getElementById('count-status').textContent = 'Ready to start animation...';
            }
            
            // Bind control events
            document.getElementById('start-count-animation').addEventListener('click', startCountAnimation);
            document.getElementById('pause-count-animation').addEventListener('click', pauseCountAnimation);
            document.getElementById('reset-count-animation').addEventListener('click', resetCountAnimation);
        }`
};

// Export for both Node.js and browser environments
if (typeof module !== 'undefined' && module.exports) {
    module.exports = config;
} else if (typeof window !== 'undefined') {
    window.countAndSayConfig = config;
}
