plugins {
    id 'com.github.kt3k.coveralls' version '2.12.2'
}

group 'SimplifyLearning'
version '0.9.1'

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
    }
    configurations.all {
        resolutionStrategy {
            // Force the use of guava and exclude google-collections to resolve conflict
            force 'com.google.guava:guava:33.0.0-jre'
        }
        // Exclude the problematic google-collections dependency
        exclude group: 'com.google.collections', module: 'google-collections'
    }
    jacoco {
        toolVersion = JaCoCoVersion
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    
    java {
        sourceCompatibility = JavaVersion.toVersion(JDKVersion)
        targetCompatibility = JavaVersion.toVersion(JDKVersion)
    }
    checkstyle {
        toolVersion = CheckStyleVersion
        configFile = file('../config/checkstyle/checkstyle.xml')
        configProperties = [
                'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = false
        showViolations = false
    }
    dependencies {
        testImplementation platform("org.junit:junit-bom:${JUnitVersion}")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.hamcrest:hamcrest:2.2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
    test {
        useJUnitPlatform()
    }
    jacocoTestReport {
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
        onlyIf = {
            true
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/*SampleRESTApplication.*'])
            })
        }
    }
    test.finalizedBy(project.tasks.jacocoTestReport)
    check.dependsOn jacocoTestReport
}

task alljavadoc(type: Javadoc) {
    dependsOn = subprojects.test
    source subprojects.collect { subprojects.sourceSets.main.allJava }
    classpath = files(subprojects.collect { subprojects.sourceSets.main.compileClasspath })
    destinationDir = file("docs")
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*SampleRESTApplication.*'])
        })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}