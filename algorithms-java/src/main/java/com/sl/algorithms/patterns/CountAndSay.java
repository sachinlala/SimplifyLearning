package com.sl.algorithms.patterns;

/**
 * Generate Count and Say sequence starting from a given number.
 * The Count and Say sequence is generated by reading the previous number and describing what you see.
 *
 * <p>Examples:
 * Starting with 1:
 * - Row 0: 1
 * - Row 1: 11 (one 1)
 * - Row 2: 21 (two 1s)
 * - Row 3: 1211 (one 2, one 1)
 * - Row 4: 111221 (one 1, one 2, two 1s)
 *
 * <p>Starting with 7:
 * - Row 0: 7
 * - Row 1: 17 (one 7)
 * - Row 2: 1117 (one 1, one 7)
 * - Row 3: 3117 (three 1s, one 7)
 */
public class CountAndSay {

  /**
   * Compute the Count and Say sequence for a given starting number and row.
   *
   * @param startingNumber The starting number (must be positive)
   * @param rowNumber The row number to generate (0-based, must be non-negative)
   * @return The Count and Say sequence for the specified row
   * @throws IllegalArgumentException if inputs are invalid or rowNumber &gt; 40
   */
  public static String compute(final int startingNumber, final int rowNumber) {
    // Input validation
    if (startingNumber <= 0 || rowNumber < 0) {
      throw new IllegalArgumentException("Invalid input: startingNumber must be positive, rowNumber must be non-negative");
    }

    // Upper bound check to prevent memory issues
    if (rowNumber > 40) {
      throw new IllegalArgumentException("Row number too large (max 40): may cause out-of-memory error");
    }

    // Base case: row 0 is the starting number itself
    if (rowNumber == 0) {
      return String.valueOf(startingNumber);
    }

    String current = String.valueOf(startingNumber);

    // Generate sequence up to the requested row
    for (int i = 1; i <= rowNumber; i++) {
      current = getNext(current);
    }

    return current;
  }
    
  /**
   * Generate the next sequence in Count and Say.
   *
   * @param sequence Current sequence as string
   * @return Next sequence
   */
  private static String getNext(final String sequence) {
    final StringBuilder result = new StringBuilder();
    int count = 1;
    char currentChar = sequence.charAt(0);

    for (int i = 1; i < sequence.length(); i++) {
      if (sequence.charAt(i) == currentChar) {
        count++;
      } else {
        result.append(count).append(currentChar);
        currentChar = sequence.charAt(i);
        count = 1;
      }
    }

    // Add the last group
    result.append(count).append(currentChar);

    return result.toString();
  }
    
  /**
   * Generate multiple rows of Count and Say sequence for visualization.
   *
   * @param startingNumber The starting number
   * @param maxRows Maximum number of rows to generate
   * @return Array of sequences
   */
  public static String[] generateMultipleRows(final int startingNumber, final int maxRows) {
    if (startingNumber <= 0 || maxRows <= 0) {
      throw new IllegalArgumentException("Invalid input: both parameters must be positive");
    }

    if (maxRows > 40) {
      throw new IllegalArgumentException("Too many rows requested (max 40)");
    }

    final String[] results = new String[maxRows];
    String current = String.valueOf(startingNumber);
    results[0] = "Row 0: " + current;

    for (int i = 1; i < maxRows; i++) {
      current = getNext(current);
      results[i] = "Row " + i + ": " + current;
    }

    return results;
  }
}
